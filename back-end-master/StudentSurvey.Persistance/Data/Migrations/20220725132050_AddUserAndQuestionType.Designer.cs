// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentSurvey.Persistance.Data;

namespace StudentSurvey.Persistance.Data.Migrations
{
    [DbContext(typeof(StudentSurveyDbContext))]
    [Migration("20220725132050_AddUserAndQuestionType")]
    partial class AddUserAndQuestionType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyHotel.Domain.Entities.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDAnswer")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option1");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option2");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option3");

                    b.Property<string>("Option4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option4");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int")
                        .HasColumnName("IdQuestion");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID")
                        .IsUnique();

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Consent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDConsent")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Agree")
                        .HasColumnType("bit")
                        .HasColumnName("Agree");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Expiration_Date");

                    b.Property<int>("SurveyID")
                        .HasColumnType("int")
                        .HasColumnName("IDSurvey");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("IDUser");

                    b.HasKey("Id");

                    b.HasIndex("SurveyID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Question_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDQuestionType")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question_Type");

                    b.HasKey("Id");

                    b.ToTable("Question_Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionType = "Selector"
                        });
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDQuestion")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question");

                    b.Property<int>("Question_TypeID")
                        .HasColumnType("int")
                        .HasColumnName("ID_QuestionType");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_TypeID");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDSurvey")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Closing_Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Closing_Time");

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Created_By");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IDTopic")
                        .HasColumnType("int")
                        .HasColumnName("IDTopic");

                    b.Property<string>("Modified_By")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Modified_By");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("Opening_Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("Opening_Time");

                    b.Property<int?>("TopicsId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicsId");

                    b.HasIndex("UserId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Survey_Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_SurveyAnswer")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Answer");

                    b.Property<int>("Survey_QuestionID")
                        .HasColumnType("int")
                        .HasColumnName("ID_SurveyQuestion");

                    b.Property<int?>("Survey_QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("IDUser");

                    b.HasKey("Id");

                    b.HasIndex("Survey_QuestionsId");

                    b.HasIndex("UserID");

                    b.ToTable("Survey_Answers");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Survey_Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_SurveyQuestion")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionsID")
                        .HasColumnType("int")
                        .HasColumnName("IDQuestion");

                    b.Property<int>("SurveyID")
                        .HasColumnType("int")
                        .HasColumnName("IDSurvey");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsID");

                    b.HasIndex("SurveyID");

                    b.ToTable("Survey_Questions");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Topics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTopic")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Topic");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdUser")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("First_Name");

                    b.Property<string>("Hashed_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hashed_Password");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdmin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone_Number");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            Email = "user@yahoo.com",
                            FirstName = "First",
                            Hashed_Password = "123456",
                            IsAdmin = false,
                            LastName = "User",
                            PhoneNumber = "0712345678",
                            Username = "User"
                        },
                        new
                        {
                            Id = 21,
                            Email = "usernou@yahoo.com",
                            FirstName = "FirstUser",
                            Hashed_Password = "123456",
                            IsAdmin = true,
                            LastName = "LastUser",
                            PhoneNumber = "0712345671",
                            Username = "UserNou"
                        });
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Answers", b =>
                {
                    b.HasOne("MyHotel.Domain.Entities.Questions", "Question")
                        .WithOne("Answers")
                        .HasForeignKey("MyHotel.Domain.Entities.Answers", "QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Consent", b =>
                {
                    b.HasOne("MyHotel.Domain.Entities.Survey", "Survey")
                        .WithOne("Consent")
                        .HasForeignKey("MyHotel.Domain.Entities.Consent", "SurveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHotel.Domain.Entities.User", "User")
                        .WithMany("Consents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Questions", b =>
                {
                    b.HasOne("MyHotel.Domain.Entities.Question_Type", null)
                        .WithMany("Questions")
                        .HasForeignKey("Question_TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHotel.Domain.Entities.Survey", null)
                        .WithMany("Rooms")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Survey", b =>
                {
                    b.HasOne("MyHotel.Domain.Entities.Topics", "Topics")
                        .WithMany("Surveys")
                        .HasForeignKey("TopicsId");

                    b.HasOne("MyHotel.Domain.Entities.User", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserId");

                    b.Navigation("Topics");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Survey_Answers", b =>
                {
                    b.HasOne("MyHotel.Domain.Entities.Survey_Questions", "Survey_Questions")
                        .WithMany()
                        .HasForeignKey("Survey_QuestionsId");

                    b.HasOne("MyHotel.Domain.Entities.User", "User")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey_Questions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Survey_Questions", b =>
                {
                    b.HasOne("MyHotel.Domain.Entities.Questions", "Question")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHotel.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Question_Type", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Questions", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Consent");

                    b.Navigation("Rooms");

                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.Topics", b =>
                {
                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("MyHotel.Domain.Entities.User", b =>
                {
                    b.Navigation("Consents");

                    b.Navigation("SurveyAnswers");

                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
